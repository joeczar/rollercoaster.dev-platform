---
description: Component Development Guidelines
globs: *.vue
alwaysApply: false
---
# Component Development Guidelines

## Component Structure Overview

This project uses Nuxt's file-based routing and auto-imports with a structured component organization pattern:

```
components/
├── ui/             # shadcn components and primitive UI elements
│   ├── Button/
│   │   └── index.vue
│   ├── Card/
│   │   ├── index.vue
│   │   ├── Header.vue
│   │   └── Content.vue
│   └── ...
├── layout/         # Page layout components
│   ├── Header/
│   │   └── index.vue
│   └── Footer/
│       └── index.vue
└── Badge/          # Feature-specific components
    ├── Progress/
    │   └── index.vue
    ├── Details/
    │   └── index.vue
    └── ...
```

## Nuxt Auto-imports

### Component Auto-imports

Components are automatically imported based on their location in the `components/` directory:

```vue
<template>
  <!-- Components are auto-imported based on directory structure -->
  <BadgeProgress :progress="50" />
  <BadgeDetails :badge="selectedBadge" />
  
  <!-- UI components are auto-imported from components/ui -->
  <UiButton>Click me</UiButton>
  <UiCard>
    <UiCardHeader>Title</UiCardHeader>
    <UiCardContent>Content</UiCardContent>
  </UiCard>
</template>

<script setup lang="ts">
// No imports needed for components!
// They are automatically available in the template
</script>
```

### Composables Auto-imports

Nuxt automatically imports composables from the `composables/` directory:

```typescript
// No need to import, these are auto-imported
const { isDark } = useColorMode()
const { badge } = useBadge()
```

## shadcn Component Integration

### Adding New shadcn Components

1. Use the dedicated script to add new components:
   ```bash
   pnpm shadcn-vue add <component-name>
   ```

2. Components will be added to the `components/ui/` directory following Nuxt's naming conventions

### Customizing shadcn Components

1. **Don't modify the original components directly**
2. **Options for customization**:
   - Create wrapper components in `components/Badge/` or relevant feature directory
   - Use the variant pattern with `cva` for styling alternatives
   - Extend via composition rather than inheritance

## Vue Component Best Practices

### Component Layout

Components should follow this order:

```vue
<script setup lang="ts">
// 1. External library imports (though these should be minimal with auto-imports)
import { type Badge } from '@/types/badge'

// 2. Type definitions
interface Props {
  badge?: Badge
  isLoading?: boolean
}

// 3. Props and emits
const props = withDefaults(defineProps<Props>(), {
  isLoading: false
})

const emit = defineEmits<{
  (e: 'update', badge: Badge): void
  (e: 'delete'): void
}>()

// 4. Composables (auto-imported)
const colorMode = useColorMode()
const { formatDate } = useDateFormatter()

// 5. Reactive state
const isOpen = ref(false)

// 6. Computed properties
const formattedDate = computed(() => 
  formatDate(props.badge?.createdAt)
)

// 7. Methods
const handleDelete = () => {
  isOpen.value = false
  emit('delete')
}

// 8. Lifecycle hooks (if needed)
onMounted(() => {
  // Initialize
})
</script>

<template>
  <div class="badge-component">
    <!-- Component template -->
  </div>
</template>

<style scoped>
.badge-component {
  /* Component styles */
}
</style>
```

## State Management

### Local Component State

Use Vue's Composition API with Nuxt's auto-imported composables:

```typescript
// Composables are auto-imported
const count = ref(0)
const doubled = computed(() => count.value * 2)
```

### Global/Shared State

Use Nuxt's built-in state management:

```typescript
// Auto-imported from composables
const colorMode = useColorMode()
const appConfig = useAppConfig()

// Pinia stores are also auto-imported
const badgeStore = useBadgeStore()
```

## Component Testing

Component tests should be created in the same directory as the component:

```
components/
└── Badge/
    └── Progress/
        ├── index.vue
        └── Progress.test.ts
```

```typescript
// Progress.test.ts
import { describe, it, expect } from 'vitest'
import { mount } from '@vue/test-utils'

// Component is auto-imported in tests
describe('BadgeProgress', () => {
  it('renders correctly', () => {
    const wrapper = mount(BadgeProgress, {
      props: {
        progress: 50
      }
    })
    expect(wrapper.text()).toContain('50%')
  })
})
```

## Component Documentation

All component documentation should be done in Storybook:

1. Create a story file next to your component:
```
components/
└── Badge/
    └── Progress/
        ├── index.vue
        ├── Progress.test.ts
        └── Progress.stories.ts
```

2. Document your component using Storybook's features:
   - Component description
   - Props documentation
   - Usage examples
   - Interactive controls
   - Accessibility guidelines
   - Visual regression tests

## Accessibility Requirements

All components must meet these accessibility requirements:

1. **Keyboard navigable**: All interactive elements must be usable with a keyboard
2. **Screen reader friendly**: Use semantic HTML and ARIA attributes when needed
3. **Color contrast**: Meet WCAG AA standards for text and UI elements
4. **Focus indicators**: Clearly visible focus states for all interactive elements
5. **Motion safe**: Respect `prefers-reduced-motion` for animations
6. **Responsive**: Work well on all screen sizes
